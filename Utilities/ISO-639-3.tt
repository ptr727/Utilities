<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualBasic.dll" #> 
<#@ import namespace="Microsoft.VisualBasic.FileIO" #>
using System.Collections.Generic;

namespace InsaneGenius.Utilities;

// ISO 639-3 Generated Code
public partial class Iso6393
{
	// Create a list of all known codes
	public static List<Iso6393> Create()
	{
		List<Iso6393> list = new List<Iso6393> {
<# 
    // Setup text parser
	string filename = Host.ResolvePath("ISO-639-3.tab"); 
    TextFieldParser tfp = new(filename)
    {
        TextFieldType = FieldType.Delimited,
        Delimiters = new[] { ",", "\t" },
        HasFieldsEnclosedInQuotes = true,
        TrimWhiteSpace = true
    };

    // Read first row as header
    tfp.ReadFields();

    // Read rows from file
	// For debugging limit the row count
	// int maxRows = 10;
	const int maxRows = int.MaxValue;
	int rowCount = 0;
    while (!tfp.EndOfData && rowCount < maxRows)
    {
        // Read row of data from the file
        string[] row = tfp.ReadFields();
		rowCount ++;

		// Add "," on all but last line
		string term = tfp.EndOfData || rowCount >= maxRows ? "" : ",";

        // Add new item from row data
#>
		new Iso6393 { Id = "<#=row[0]#>", Part2B = "<#=row[1]#>", Part2T = "<#=row[2]#>", Part1 = "<#=row[3]#>", Scope = "<#=row[4]#>", LanguageType = "<#=row[5]#>", RefName = "<#=row[6]#>", Comment = "<#=row[7]#>" }<#=term#>
<# 
	} 
#>  
		};
		return list;
	}
}