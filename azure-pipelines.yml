variables:
  # $(BuildConfiguration) must be set in the pipeline variables
  # NuGet credentials are integrated

pool:
  vmImage: windows-2019

steps:

# Install DotNet Core 2.x
# Required by GitVersion tool
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
- task: UseDotNet@2
  displayName: 'Install DotNet Core 2.x'
  inputs:
    packageType: runtime
    version: 2.x

# Install DotNet Core SDK 3.1.x
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
- task: UseDotNet@2
  displayName: 'Install DotNet Core SDK 3.1.x'
  inputs:
    packageType: sdk
    version: 3.1.x

# Install NuGet 4.9.x
# We need to use NuGet and not dotnet so we can get .snupkg symbol support
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/nuget?view=azure-devops
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet 4.9.x'
  inputs:
    versionSpec: 4.9.x

# Calculate the GitFlow version numbers
# https://gitversion.net/docs/build-server-support/build-server/azure-devops
- task: GitVersion@5
  displayName: 'Run GitVersion Tool'
  inputs:
    runtime: core
    configFilePath: gitversion.yml

# Set the manifest version information
# Modify the csproj file directly and use values calculated by the GitVersion tool
# https://github.com/BMuuN/vsts-assemblyinfo-task/wiki/Attributes
- task: Assembly-Info-NetCore@2
  displayName: 'Set Version Information'
  inputs:
    FileNames: 'Utilities/Utilities.csproj'
    VersionNumber: $(GitVersion.AssemblySemVer)
    FileVersionNumber: $(GitVersion.AssemblySemFileVer)
    InformationalVersion: $(GitVersion.InformationalVersion)
    PackageVersion: $(GitVersion.InformationalVersion)
    LogLevel: verbose

# DotNetCore Test
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops
- task: DotNetCoreCLI@2
  displayName: 'Run DotNet Core Tests'
  inputs:
    command: test
    projects: 'UtilitiesTests/UtilitiesTests.csproj'
    #configuration appears to be ignored, use commandline instead
    arguments: '--configuration $(BuildConfiguration)'
    #configuration: $(BuildConfiguration)
    publishTestResults: true

# DotNetCore Build
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops
- task: DotNetCoreCLI@2
  displayName: 'Build DotNet Core'
  inputs:
    command: build
    projects: 'Utilities/Utilities.csproj'
    #configuration appears to be ignored, use commandline instead
    arguments: '--configuration $(BuildConfiguration)'
    #configuration: $(BuildConfiguration)

# DotNetCore Pack
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops
- task: DotNetCoreCLI@2
  displayName: 'Pack DotNet Core'
  inputs:
    command: pack
    packagesToPack: 'Utilities/Utilities.csproj'
    nobuild: true
    includesymbols: true
    includesource: true
    versioningScheme: byEnvVar 
    versionEnvVar: GitVersion.NuGetVersion

# NuGet Push
# Use NuGet command task instead of dotnet push so we can get .snupkg symbol support
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget?view=azure-devops
- task: NuGetCommand@2
  displayName: 'Push NuGet'
  # TODO : Do not publish pre-release builds else NuGet will fail with duplicate version numbers
  # Consider using --skip-duplicate, or append a unique build number
  #condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/develop'))
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: NuGet
